#!/usr/bin/php
<?php
/**
 * INICLI is a command-line INIpay interface. Speak it like 'ini-klie'.
 *
 * Version : very first
 * Author  : baxang (sh@baxang.com)
 *
 * INIpay50 library should be placed in vendor/INIpay50 as it was given.
 * Otherwise you need to set your own INIFactory::$INIPAY_ROOT.
 *
 * Usage: ./inicli.php --command=[chkfake|securepay|cancel] --mid=[given mid] --admin=[given admin id] \
 *                     --params='[paramaters in JSON format]'
 */

$required_extensions = array('mcrypt', 'sockets', 'xml', 'openssl', 'mbstring' );
foreach ($required_extensions as $ext_name) {
    if ( !extension_loaded($ext_name) ) {
        echo "{$ext_name} extension not loaded.\n";
        exit(1);
    }
}

$opts = getopt(
    '',
    array('mid:', 'admin:', 'params:', 'command:')
);

$commands = array('prepare', 'chkfake', 'securepay', 'cancel');
if (false == in_array($opts['command'], $commands)) {
    echo "Invalid command given: {$opts['command']}\n";
    exit(1);
}

//INIFactory::$INIPAY_ROOT = dirname(__FILE__) . '/INIpay50';
INIFactory::$ADMIN       = $opts['admin'];
INIFactory::$MID         = $opts['mid'];
ob_start();
require_once INIFactory::$INIPAY_ROOT.'/libs/INILib.php';


$params = (array) json_decode($opts['params']);
$result = call_user_func_array( array('INIFactory', $opts['command']), array($params) );

ob_clean(); // eliminates a new line in INILib.php
echo $result;
exit(0);

// Command-line INIpay
class INIFactory {
    public static $INIPAY_ROOT = 'WORK_DIR';
    public static $DEBUG       = 'true';
    public static $ADMIN       = '1111';
    public static $MID         = 'INIpayTest';
    public static $PGID        = '';
    

    static public function chkfake($params = array()) {
        $params_keys = array('price', 'quotabase');
        $result_keys = array('ResultCode', 'ResultMsg', 'ResultErrorCode', 'rn', 'enctype', 'encfield', 'certid');

        $inipay = self::get_instance();
        $inipay->SetField('type',       'chkfake');
        $inipay->SetField('enctype',    'asym');
        $inipay->SetField('checkopt',   'false');
        $inipay->SetField('nointerest', 'no');

        self::assign_params($inipay, $params, $params_keys);

        $inipay->startAction();

        $result = self::sanitize_result($inipay, $result_keys);

        return json_encode($result);
    }
    
    
      static public function prepare($params = array()) {
      	$params_keys = array('orderNumber', 'price');
      	 $result_keys = array('oid', 'mKey', 'sign', 'timestamp');
      	
      	

$result = $params;
$orderNumber = $params["orderNumber"];
$price = $params["price"];

    	$timestamp = self::getTimestamp();   // util에 의해서 자동생성
    	$cardNoInterestQuota = "11-2:3:,34-5:12,14-6:12:24,12-12:36,06-9:12,01-3:4";  // 카드 무이자 여부 설정(가맹점에서 직접 설정)
		$cardQuotaBase = "2:3:4:5:6:11:12:24:36";  // 가맹점에서 사용할 할부 개월수 설정
		 $signKey = "SU5JTElURV9UUklQTEVERVNfS0VZU1RS"; // 가맹점에 제공된 웹 표준 사인키(가맹점 수정후 고정)
		$mKey = self::makeHash($signKey, "sha256");
		
		
  

	

		$params = array(
    		"oid" => $orderNumber,
    		"price" => $price,
    	 	"timestamp" => $timestamp
		);
		$sign = self::makeSignature($params, "sha256");
		

//        $inipay["inipayhome"] = self::$INIPAY_ROOT;
//       $inipay["debug"] = self::$DEBUG;
//     $inipay["admin"] = self::$ADMIN;
//   $inipay["mid"] = self::$MID;



$result["oid"] = $orderNumber;
$result["timestamp"] = $timestamp;
$result["mKey"] = $mKey;
$result["sign"] = $sign;
$result["cardNoInterestQuota"] = $cardNoInterestQuota;
$result["cardQuotaBase"] = $cardQuotaBase;




        return json_encode($result);


        
    }

    static public function securepay($params = array()) {
        $params_keys = array(
            'buyername',
            'buyertel',
            'buyeremail',

            'goodname',
            'price',
            'currency',

            'paymethod',
            'encrypted',
            'sessionkey',
            'enctype',
            'rn',
            
            'oid',


            'uid',
            'url',
        );
        $result_keys     = array(
            'ResultCode', 'ResultMsg', 'ResultErrorCode',

            'PayMethod', // 지불방법
            'MOID',      // 상점주문번호
            'TotPrice',  // 결제완료금액
            'TID',       // 거래번호

            // 신용카드 결제 결과 데이터
            'ApplDate',           // 이니시스 승인날짜
            'ApplTime',           // 이니시스 승인시각
            'ApplNum',            // 신용카드 승인번호
            'CARD_Quota',         // 할부기간
            'CARD_Interest',      // 무이자할부 여부: 1이면 무이자 할부
            'CARD_Code',          // 신용카드사 코드
            'CARD_BankCode',      // 카드발급사 코드
            'CARD_AuthType',      // 본인인증 수행 여부: 00이면 수행
            'EventCode',          // 각종 이벤트 적용 여부
            'VACT_Num',           // 입금 계좌
            'VACT_BankCode',      // 입금은행코드
            'VACT_Name',          // 입금자명
            'VACT_Date',          // 송금일자
            'VACT_InputName',     // 송금자명
            'VACT_Time'           // 송금시각
        );
        $inipay = self::get_instance();
        $inipay->SetField('type',    'securepay');
        $inipay->SetField('subpgip', '203.238.3.10');
        $inipay->SetField('pgid',    'INIphp'.self::$PGID);

        self::assign_params($inipay, $params, $params_keys);

        $inipay->startAction();

        $result = self::sanitize_result($inipay, $result_keys);

        return json_encode($result);
    }

    static public function cancel($params) {
        $params_keys = array(
            'tid', 'message'
        );  
        $result_keys     = array(
            'ResultCode', 'ResultMsg', 'ResultErrorCode', 'CancelDate', 'CancelTime'
        );
        $inipay = self::get_instance();
        $inipay->SetField('type',       'cancel');

        self::assign_params($inipay, $params, $params_keys);
        
        $inipay->startAction();

        $result = self::sanitize_result($inipay, $result_keys);

        return json_encode($result);
    }

    static private function get_instance() {
        $inipay = new INIpay50;
        $inipay->SetField('inipayhome', self::$INIPAY_ROOT);
        $inipay->SetField('debug',      self::$DEBUG);
        $inipay->SetField('admin',      self::$ADMIN);
        $inipay->SetField('mid',        self::$MID);

        return $inipay;
    }

    static private function assign_params($payobject, $params, $keys) {
        foreach($keys as $k) {
            $payobject->SetField($k, mb_convert_encoding( $params[$k], 'EUC-KR', 'UTF-8' ));
        }
        if (isset($params['paymethod'])) {
            $payobject->SetField('pgid', 'INIphp' . self::get_pgid($params['paymethod']));
        }
    }

    static private function sanitize_result($payobject, $keys) {
        $result = array();
        foreach($keys as $k) {
            $result[$k] = mb_convert_encoding( trim($payobject->GetResult($k)), 'UTF-8', 'EUC-KR' );
        }
        return $result;
    }

    static private function get_pgid($paymethod) {
        $pgid = $paymethod;
        switch($paymethod){
            case(Card):             // 신용카드
                $pgid = "CARD"; break;
            case(Account):      // 은행 계좌 이체
                $pgid = "ACCT"; break;
            case(DirectBank): // 실시간 계좌 이체
                $pgid = "DBNK"; break;
            case(OCBPoint):     // OCB
                $pgid = "OCBP"; break;
            case(VCard):            // ISP 결제
                $pgid = "ISP_"; break;
            case(HPP):              // 휴대폰 결제
                $pgid = "HPP_"; break;
            case(ArsBill):      // 700 전화결제
                $pgid = "ARSB"; break;
            case(PhoneBill):    // PhoneBill 결제(받는 전화)
                $pgid = "PHNB"; break;
            case(Ars1588Bill):// 1588 전화결제
                $pgid = "1588"; break;
            case(VBank):        // 가상계좌 이체
                $pgid = "VBNK"; break;
            case(Culture):      // 문화상품권 결제
                $pgid = "CULT"; break;
            case(CMS):              // CMS 결제
                $pgid = "CMS_"; break;
            case(AUTH):             // 신용카드 유효성 검사
                $pgid = "AUTH"; break;
            case(INIcard):      // 네티머니 결제
                $pgid = "INIC"; break;
            case(MDX):              // 몬덱스카드
                $pgid = "MDX_"; break;
        }
        return $pgid;
    }


    	static private function getTimestamp()	{
			// timezone 을 설정하지 않으면 getTimestapme() 실행시 오류가 발생한다.
			// php.ini 에 timezone 설정이 되어 잇으면 아래 코드가 필요없다. 
			// php 5.3 이후로는 반드시 timezone 설정을 해야하기 때문에 아래 코드가 필요없을 수 있음. 나중에 확인 후 수정필요.
			// 이니시스 플로우에서 timestamp 값이 중요하게 사용되는 것으로 보이기 때문에 정확한 timezone 설정후 timestamp 값이 필요하지 않을까 함.
			date_default_timezone_set('Asia/Seoul');
			$date = new DateTime();
			
			$milliseconds = round(microtime(true) * 1000);	
			$tempValue1 = round($milliseconds/1000);		//max integer 자릿수가 9이므로 뒤 3자리를 뺀다
			$tempValue2 = round(microtime(false) * 1000);	//뒤 3자리를 저장
			switch (strlen($tempValue2)) {
				case '3':
					break;
				case '2':
					$tempValue2 = "0".$tempValue2;
					break;
				case '1':
					$tempValue2 = "00".$tempValue2;
					break;
				default:
					$tempValue2 = "000";
					break;
			}
			
			return "".$tempValue1.$tempValue2;
		}
	
		/*
		 //*** 위변조 방지체크를 signature 생성 ***
		
		 mid, price, timestamp 3개의 키와 값을	
		 key=value 형식으로 하여 '&'로 연결한 하여 SHA-256 Hash로 생성 된값	
		 ex) mid=INIpayTest&price=819000&timestamp=2012-02-01 09:19:04.004
		
		 * key기준 알파벳 정렬
		 * timestamp는 반드시 signature생성에 사용한 timestamp 값을 timestamp input에 그데로 사용하여야함
		 */	
		static private function makeSignature($signParam) {
			ksort($signParam);
			$string = "";
			foreach ($signParam as $key => $value) {
				$string .= "&$key=$value";
			}		
			$string = substr($string, 1); // remove leading "&"
			
			$sign = self::makeHash($string, "sha256");
					
			return $sign;
		}
		
		static private function makeHash($data, $alg) {
			// $s = hash_hmac('sha256', $data, 'secret', true);
			// return base64_encode($s);
			
			$ret = openssl_digest($data, $alg);
			return $ret;
		}
}

